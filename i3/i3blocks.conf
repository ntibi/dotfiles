# i3blocks config file
#
# Please see man i3blocks for a complete reference!
# The man page is also hosted at http://vivien.github.io/i3blocks
#
# List of valid properties:
#
# align
# color
# command
# full_text
# instance
# interval
# label
# min_width
# name
# separator
# separator_block_width
# short_text
# signal
# urgent

# Global properties
#
# The top properties below are applied to every block, but can be overridden.
# Each block command defaults to the script name to avoid boilerplate.
command=/usr/share/i3blocks/$BLOCK_NAME
separator_block_width=15
markup=none

[song]
color=#666666
separator=false
command=playerctl -F -f "{{ status }} {{title}}  {{artist}} - {{album}}" metadata | sed -u "s/Playing/>/; s/Paused/|/"
interval=persist

[jack]
separator=false
command=amixer -c 0 cget numid=17 | awk '/values=on/{printf "%1$s\n%1$s\n#%2$6x\n", "jack", 0xcc00cc; } /values=off/{print ""}'
interval=1

[volume]
interval=once
signal=1
command=amixer -D default get Master | awk 'BEGIN{FS=" |\\[|\\]"; vmin = 0; vmax = 100; cmin=0xaa00aa; cmax=0xff00ff; } function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /(Mono|Front (Left|Right)):/{ pc=int($7)?$7:$8; status=$12; } END{ color = component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff); if (status=="off") color=0x880088; printf "%3$s %1$d%%\n%1$s\n#%2$6x\n", pc, color, (status=="on"?"♪":"x") }'

[brightness]
label=☀
command=awk 'BEGIN{vmin = 0; vmax = 100; cmin=0x555555; cmax=0xaaaaaa} function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } NR==1{current=$1} NR==2{max=$1} END{ pc=int(current*100/max); printf "%1$s\n%1$s\n#%2$6x\n", pc, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff) }' /sys/class/backlight/intel_backlight/brightness /sys/class/backlight/intel_backlight/max_brightness
interval=once
signal=1

[memory]
command=awk 'BEGIN{vmin = 0; vmax = 100; cmin=0x44ff44; cmax=0xff4444} function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /^MemTotal:/ { mem_total=$2 } /^MemFree:/ { mem_free=$2 } /^Buffers:/ { mem_free+=$2 } /^Cached:/ { mem_free+=$2 } END { used=(mem_total-mem_free)/1024/1024; total=mem_total/1024/1024; free=mem_free/1024/1024; mem_total=mem_total/1024/1024; mem_free=mem_free/1024/1024; swap=swap/1024/1024; pc=(mem_total-mem_free)*100/mem_total; printf "%1$.1fG/%2$.1fG\n%1$.1fG/%2$.1fG\n#%3$6x\n", mem_total-mem_free, mem_total, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff)} ' /proc/meminfo
interval=1
separator=false

[swap]
command=awk 'BEGIN{vmin = 0; vmax = 4; cmin=0x44ff44; cmax=0xff4444} function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /^SwapTotal:/ { swap_total=$2 } /^SwapFree:/ { swap_free=$2 } END { swap=(swap_total-swap_free)/1024/1024; pc=swap; printf "(%1$.1fG)\n(%1$.1fG)\n#%2$6x\n", swap, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff)} ' /proc/meminfo
interval=1

[disk]
command=df -hPl --total ~ | awk 'BEGIN{vmin = 0; vmax = 100; cmin=0x4477dd; cmax=0xdd0000} function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /total/{ size=$2; used=$3; avail=$4; pc=int($5); printf "~ %1$s/%2$s (%3$d%)\n%1$s/%2$s (%3$d%)\n#%4$6x\n", used, size, pc, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff)} '
interval=5

[disk]
command=df -hPl --total / | awk 'BEGIN{vmin = 0; vmax = 100; cmin=0x4477dd; cmax=0xdd0000} function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /total/{ size=$2; used=$3; avail=$4; pc=int($5); printf "/ %1$s/%2$s (%3$d%)\n%1$s/%2$s (%3$d%)\n#%4$6x\n", used, size, pc, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff)} '
interval=5

[bluetooth]
command=awk '/status/{print ($2 =="enabled" ? "B" : "")}' /proc/acpi/ibm/bluetooth
interval=once
signal=1

[iface]
label=lo
interval=5
separator=false

[wifi]
interval=5
separator=false

[ip]
label=ip
command=curl -s "http://whatismyip.akamai.com/"
interval=once
separator=true

[openvpn]
interval=20

[cpu_usage]
label=CPU
interval=1
command=mpstat 1 1 | awk 'BEGIN{vmin = 0; vmax = 100; cmin=0x44ff44; cmax=0xff4444 } function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /Average/{ pc=100-$12; printf "%1$3d%%\n%1$d%%\n#%2$6x\n", pc, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff) }'

[fan]
command=awk 'BEGIN{vmin = 0; vmax = 5000; cmin=0x00ff00; cmax=0xffff00 } function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } /speed/{ pc=$2; if (pc != 0) printf "%1$s\n%1$s\n#%2$6x\n", "fan: "pc, component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff) }' /proc/acpi/ibm/fan
interval=5
separator=false

[temperature]
command=awk 'BEGIN{vmin = 30; vmax = 60; cmin=0xff00; cmax=0xff0000 } function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); } { temp = realtemp = $1 / 1000; if (temp < vmin) temp = vmin; if (temp > vmax) temp = vmax; printf "%1$s\n%1$s\n#%2$6x\n", realtemp"°C", component(temp, 0xff0000) + component(temp, 0xff00) + component(temp, 0xff) }' /sys/class/thermal/thermal_zone0/temp
interval=5

[battery]
label=⚡
command=acpi -b | awk 'BEGIN{FS=",| "; vmin = 0; vmax = 100; cmin=0xff0000; cmax=0xffff00 } function component(temp, mask) { if (temp > vmax) temp = vmax; if (temp < vmin) temp = vmin; lcmin=and(cmin, mask); lcmax=and(cmax, mask); return and(lcmin + (temp - vmin) * (lcmax - lcmin) / (vmax - vmin), mask); }  /Battery 1/{ pc=int($5); printf "%1$s\n%1$s\n#%2$6x", pc"%"($3 == "Charging" ? "+" : "-")" ("$7")", component(pc, 0xff0000) + component(pc, 0xff00) + component(pc, 0xff)}'
interval=5

[time]
color=#03bcb3
command=date +"%d-%m-%Y (%a %d %b) %H:%M:%S"
interval=1
